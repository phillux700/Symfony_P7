security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\Client:
            algorithm: bcrypt

    #role_hierarchy:
      #ROLE_ADMIN: ROLE_USER

    providers:
      #in_memory:
        #memory:
          #users:
            #user:  { password: password, roles: [ 'ROLE_USER' ] }
            #admin: { password: password, roles: [ 'ROLE_ADMIN' ] }

        #in_memory: { memory: ~ }

      api_provider:
          entity:
              class: App\Entity\Client
              property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login_check
                #require_previous_session: false
                #username_parameter: username
                #password_parameter: password
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
            #provider: api_provider

        register:
            pattern:  ^/register
            stateless: true
            anonymous: true

        #api:
            #pattern:   ^/api
            #stateless: true
            #anonymous: false
            #provider: api_provider
            #guard:
                #authenticators:
                #- lexik_jwt_authentication.jwt_token_authenticator
        #dev:
            #pattern: ^/(_(profiler|wdt)|css|images|js)/
            #security: false
        #main:
            #anonymous: true

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
        #main:
          #anonymous: ~
          #form_login:
            #login_path: /login
            #check_path: /login_check
          #provider: api_provider

    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
